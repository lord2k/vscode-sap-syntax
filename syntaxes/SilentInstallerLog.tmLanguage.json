{
  "name": "SilentInstallerLog",
  "scopeName": "source.sapinst.log",
  "patterns": [
    { "include": "#processDefinitions" },
    { "include": "#logline" },
    { "include": "#value" }
  ],
  "repository": {
    "logline": {
      "match": "(?x)\n(\\d{4}-\\d{2}-\\d{2}\\s(?:\\d{2}\\:?){3})\\s*\n\\[(?:(error)|(\\w+))\\]\\s*\\[(\\d+)\\]\\[(\\d+)\\]\n([\\w\\|\\s\\.\\-]+pm\\s*\\|\\s*)?\n|(\\[(?:DEBUG|ERROR|INFO|RESULT|WARNING)\\]:)\n|((\\[[\\w:\\\\.\\/]+\\])+)\n|(.+)\\G",
      "captures": {
        "1": { "name": "meta.date keyword.sapinst.log" },
        "2": { "name": "meta.severity invalid.keyword.sapinst.log" },
        "3": { "name": "meta.severity variable.sapinst.log" },
        "4": { "name": "meta.thread constant.character.escape.sapinst.log" },
        "5": { "name": "meta.pid constant.character.escape.sapinst.log" },
        "6": { "name": "meta.perlmod support.function.builtin.sapinst.log" },
        "7": {
          "name": "meta.lvm string.unquoted.sapinst.log markup.bold markup.italic"
        },
        "8": { "name": "meta.perlmod support.function.builtin.sapinst.log" },
        "9": { "name": "meta.perlmod entity.function.parameter.sapinst.log" },
        "10": {
          "name": "content.sapinst.log",
          "patterns": [{ "include": "#value" }]
        }
      }
    },
    "date": {
      "match": "(\\d{4}-\\d{2}-\\d{2}\\s(?:\\d{2}\\:?){3})",
      "name": "date keyword.sapinst.log"
    },
    "array": {
      "begin": "(?<!Condition |\\\\)\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.json"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.json"
        }
      },
      "name": "meta.structure.array.json",
      "patterns": [
        {
          "include": "#value"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.json"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.json"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.json"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "end": "\\*/",
          "name": "comment.block.json"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false|null|sub)\\b",
      "name": "constant.language.json"
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
      "name": "constant.numeric.json"
    },
    "object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.json"
        }
      },
      "end": "\\}(?!>)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.json"
        }
      },
      "name": "meta.structure.dictionary.json",
      "patterns": [
        {
          "comment": "the object key",
          "include": "#objectkey"
        },
        {
          "include": "#comments"
        },
        {
          "begin": "=>|:",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.json"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.json"
            }
          },
          "name": "meta.structure.dictionary.value.json",
          "patterns": [
            {
              "comment": "the JSON object value",
              "include": "#value"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.json"
            }
          ]
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.json"
        }
      ]
    },
    "string": {
      "patterns": [
        { "include": "#stringSingle" },
        { "include": "#stringDouble" },
        { "include": "#stringPath" }
      ]
    },
    "stringPath": {
      "match": "(/?(?:\\S+/)+\\S*),?",
      "captures": {
        "1": {
          "name": "string.path",
          "patterns": [{ "include": "source.sapinst.process#placeholder" }]
        }
      }
    },
    "stringSingle": {
      "begin": "(?<!n)'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.json"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.json"
        }
      },
      "name": "string.quoted.single.json",
      "patterns": [
        { "include": "#params" },
        { "include": "source.sapinst.process#placeholder" },
        { "include": "#stringcontent" }
      ]
    },
    "stringDouble": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.json"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.json"
        }
      },
      "name": "string.quoted.double.json",
      "patterns": [
        { "include": "#params" },
        { "include": "source.sapinst.process#placeholder" },
        { "include": "#stringcontent" }
      ]
    },
    "objectkey": {
      "begin": "'|\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.json"
        }
      },
      "end": "'|\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.json"
        }
      },
      "name": "string.json support.type.property-name.json",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x) # turn on extended mode\n  \\\\ # a literal backslash\n  (?: # ...followed by...\n  [\\\\/bfnrt]  # one of these characters\n    | # ...or...\n    u  # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.json"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.json"
        }
      ]
    },
    "processDefinitions": {
      "match": "(\\w+/)((?:BOBJ|COMMON)/ProcessDefinitions/)?([\\w\\-]+(?:\\.process))",
      "captures": {
        "1": { "name": "entity.other.attribute-name.sapinst.log" },
        "2": { "name": "variable.sapinst.log" },
        "3": { "name": "variable.alternate.sapinst.log" }
      }
    },
    "params": {
      "match": "((?:Param|LvmParamsFromFile|Setting parameter):)\\s*(<?[\\w_\\-\\s\\.]+>?)\\s*(=)\\s*(.+)",
      "captures": {
        "1": { "name": "entity.other.attribute-name.sapinst.log" },
        "2": { "name": "variable.sapinst.log" },
        "3": { "name": "keyword.operator.comparision" },
        "4": { "name": "string.unquoted.sapinst.log" }
      }
    },
    "value": {
      "patterns": [
        { "include": "#params" },
        { "include": "#constant" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "source.sapinst.process#placeholder" },
        { "include": "#array" },
        { "include": "source.sapinst.process#condition" },
        { "include": "#object" }
      ]
    }
  }
}

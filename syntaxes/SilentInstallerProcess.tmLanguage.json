{
  "name": "SilentInstallerProcess",
  "scopeName": "source.sapinst.process",
  "patterns": [
    {
      "match": "(include)(.+)$",
      "captures": {
        "1": { "name": "keyword.control.import" },
        "2": { "name": "string.path markup.bold" }
      }
    },
    { "include": "#comment" },
    { "include": "#stringDouble" },
    { "include": "#lastBefore=" },
    { "include": "#keys" },
    { "include": "#vars" },
    { "include": "#stringSingle3" },
    { "include": "#end" }
  ],

  "repository": {
    "lastBefore=": {
      "match": "([\\w\\-]+)\\s*([+*%@]?=)(?!.+=)\\s*",
      "captures": {
        "1": { "name": "variable" },
        "2": { "name": "keyword.operator.comparison markup.bold" }
      }
    },
    "keysOld": {
      "patterns": [
        {
          "contentName": "meta.embedded.block.bash",
          "begin": "(COMMANDS_\\w+)\\.(\\w+[\\.])*(\\w+)([+]?=)(\")",
          "beginCaptures": {
            "1": { "name": "keyword" },
            "2": { "name": "variable" },
            "3": { "name": "variable" },
            "4": { "name": "keyword.operator.comparison markup.bold" },
            "5": { "name": "punctuation.definition.bash.begin.sapinst.process string.quoted.double" }
          },
          "end": "(\")",
          "endCaptures": {
            "0": { "name": "punctuation.definition.bash.end.sapinst.process" },
            "1": { "name": "source.sapinst.process" }
          },
          "patterns": [
            { "include": "#placeholder" },
            { "include": "#source.shell" }
          ]
        },
        {
          "match": "(Commands?|Severity|Substitutions|Files|Control|Transfer)",
          "captures": {
            "1": { "name": "keyword support.function.builtin" }
          }
        },
        {
          "match": "\\.(Execute|IfNot|If|Not|FileExists)",
          "captures": {
            "1": {
              "name": "keyword.control support.function.builtin markup.italic"
            }
          }
        },
        {
          "match": "((?:phase|process)\\.\\d{1,3})",
          "captures": {
            "1": { "name": "entity.name.selector" }
          }
        },
        {
          "match": "^\\s*(?:([\\w\\-]+)[\\.(\\[)])",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "constant.character.escape" }
          }
        },
        { "include": "#condition" }
      ]
    },
    "keys": {
      "patterns": [
        {
          "contentName": "meta.embedded.block.bas meta.statement.command.shell",
          "begin": "(COMMANDS_\\w+)\\.(\\w+[\\.])*(\\w+)([+]?=)(\")",
          "beginCaptures": {
            "1": { "name": "keyword" },
            "2": { "name": "variable" },
            "3": { "name": "variable" },
            "4": { "name": "keyword.operator.comparison markup.bold" },
            "5": { "name": "punctuation.definition.bash.begin.sapinst.process string.quoted.double" }
          },
          "end": "(\")",
          "endCaptures": {
            "0": { "name": "punctuation.definition.bash.end.sapinst.process punctuation.terminator.statement.semicolon.shell" },
            "1": { "name": "source.sapinst.process" }
          },
          "patterns": [
            { "include": "#placeholder" },
            { "include": "#source.shell" }
          ]
        },
        {
          "begin": "^\\w+",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.keyword.begin keyword.control"
            }
          },
          "end": "\\.",
          "endCaptures": {
            "0": { "name": "punctuation.definition.keyword.end" }
          },
          "patterns": [{ "include": "#condition" }]
        },
        {
          "match": "((?:phase|process)\\.\\d{1,3})",
          "captures": {
            "1": { "name": "entity.name.selector" }
          }
        },
        {
          "match": "(\\.)(Commands?|Severity|Substitutions|Files|Control|Transfer)",
          "captures": {
            "1": { "name": "punctuation.dot" },
            "2": { "name": "keyword support.function.builtin" }
          }
        },
        {
          "match": "(\\.)(Execute|IfNot|If|Not|FileExists)",
          "captures": {
            "1": { "name": "punctuation.dot" },
            "2": {
              "name": "keyword.control support.function.builtin markup.italic"
            }
          }
        }
      ]
    },
    "vars": {
      "contentName": "variable",
      "match": "\\.([\\w_\\-]+)",
      "captures": {
        "1": { "name": "variable vars" },
        "2": { "name": "keyword.operator.comparison markup.bold" }
      }
    },
    "stringSingle": {
      "patterns": [
        { "match": "\\\\.", "name": "constant.character.escape" },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.quoted.single.begin.sapinst.process"
            }
          },
          "end": "\"(?<=\")",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.quoted.single.end.sapinst.process"
            }
          },
          "name": "string.quoted.single",
          "patterns": [
            { "include": "#placeholder" },
            { "include": "#params3" },
            { "include": "#stringDouble" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "stringDouble": {
      "patterns": [
        { "match": "\\\\.", "name": "constant.character.escape" },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.quoted.double.begin.sapinst.process"
            }
          },
          "end": "\"(?<=\")",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.quoted.double.end.sapinst.process"
            }
          },
          "name": "string.quoted.double",
          "patterns": [
            { "include": "#placeholder" },
            { "include": "#params3" },
            { "include": "#stringSingle" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "placeholder": {
      "patterns": [
        {
          "begin": "<(placeholder_)?",
          "beginCaptures": {
            "0": { "name": "entity.name.selector markup.bold" },
            "1": { "name": "variable markup.italic" }
          },
          "end": ">(?<=>)",
          "endCaptures": {
            "0": { "name": "entity.name.selector markup.bold" }
          },
          "name": "entity.other.attribute-name markup.italic meta.placeholder",
          "contentName": "entity.other.attribute-name markup.italic meta.placeholder",
          "patterns": [{ "include": "#placeholder" }]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "match": "\"?\\s*(###.*)$",
          "name": "comment markup.italic markup.bold"
        },
        { "match": "\"?\\s*(#.*)$", "name": "comment markup.italic" }
      ]
    },
    "condition": {
      "patterns": [
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": { "name": "constant.character.escape markup.bold" }
          },
          "end": "\\](?<=\\])",
          "endCaptures": {
            "0": { "name": "constant.character.escape markup.bold" }
          },
          "name": "entity.other.attribute-name markup.italic meta.condition",
          "contentName": "string.unquoted markup.italic meta.condition",
          "patterns": [{ "include": "#params" }]
        }
      ]
    },
    "condition2": {
      "patterns": [
        {
          "match": "(?:(\\[)?\\s*(\\w+)\\s*([=~<>!]+)\\s*([\\w\\d\"'.]+)\\s*(\\])?(\\s*\\w+)?)+",
          "contentName": "meta.condition",
          "captures": {
            "1": { "name": "constant.character.escape markup.bold" },
            "2": { "name": "entity.other.attribute-name  markup.italic" },
            "3": { "name": "keyword.operator.comparison markup.italic" },
            "4": { "name": "variable  markup.italic" },
            "5": { "name": "constant.character.escape markup.bold" },
            "6": { "name": "string.unquoted" }
          }
        },
        { "include": "#params" }
      ]
    },
    "params": {
      "match": "(?<optKey>[\\w\\-]*)\\s*([=<>!~]{1,2})\\s*(?<optVal>[\"']?[\\w\\-\\|\\.]*[\"']?)",
      "captures": {
        "1": { "name": "entity.other.attribute-name" },
        "2": { "name": "keyword.operator.comparison" },
        "3": { "name": "entity.name.enum string.unquoted" }
      }
    }
  }
}
